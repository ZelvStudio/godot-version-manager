#!/usr/bin/env python3

import sys
import os
import subprocess
import argparse

from os.path import basename, splitext, expanduser
from collections import namedtuple


INSTALL_PATH = '/usr/bin/godot'
SAVE_DIR = expanduser('~/.godot/')

os.makedirs(SAVE_DIR,exist_ok=True)


def extract_archive(file: str) -> str:
    """Extracts Godot archive to /tmp and return extracted file path"""
    subprocess.run(['unzip', file, '-d', '/tmp'])
    return '/tmp/' + basename(splitext(file)[0])


def add_archive(godot_file: str) -> str:
    """Add Godot app to the managed versions

    If the godot_file is a zip archive downloaded from Godot website,
    it is extracted first
    """
    # extract the zip archive if necessary
    if godot_file.endswith('.zip'):
        godot_file = extract_archive(godot_file)

    # make Godot executable
    subprocess.run(['chmod', '+x', godot_file])

    # add to the list of managed versions
    print(f'Saving a copy to {SAVE_DIR}{basename(godot_file)}')
    subprocess.run(['mv', godot_file, SAVE_DIR])
    return os.path.join(SAVE_DIR,basename(godot_file))


def install(godot_file: str):
    """Make godot_file the system Godot (from CLI and desktop)"""
    subprocess.run(['sudo', 'cp', godot_file, INSTALL_PATH])


def get_current_version() -> str:
    return get_version('godot')


def get_version(app_path: str) -> str:
    return subprocess.check_output([app_path, '--version'])\
                     .decode('utf-8')\
                     .strip()


def managed_apps() -> list[str]:
    """Return paths of managed Godot apps"""
    return [os.path.join(SAVE_DIR,app) for app in os.listdir(SAVE_DIR)]


def versions() -> list[str]:
    """Return list of managed Godot versions"""
    return [get_version(app) for app in managed_apps()]


def selection_display(version: str) -> str:
    if version == get_current_version():
        return '-> '
    else:
        return '   '


def display_version_choice() -> list[tuple]:
    Choice = namedtuple('Choice', ['id','version','path'])
    choices = [Choice(i, get_version(app), app)
               for i, app in enumerate(managed_apps())]

    to_display = [f'{selection_display(choice.version)}{choice.id}:\t{choice.version}'
                  for choice in choices]

    print('\n'.join(to_display))
    return choices


def display_versions() -> list[str]:
    """List existing Godot applications"""
    to_display = [f'{selection_display(version)}{version}'
                  for version in versions()]

    print('\n'.join(to_display))




# Instantiate the parser
parser = argparse.ArgumentParser(description='Install Godot and manage versions')

# Make arguments mutually exclusive
exclusive_group = parser.add_mutually_exclusive_group()

# Install archive file
exclusive_group.add_argument('-i', '--install', metavar=('archive'),
                    help='install Godot app (can be a zip file)')

# Change Godot version
exclusive_group.add_argument('-u', '--use', action='store_true',
                    help='pick the Godot version to use')

# Add archive file without installing
exclusive_group.add_argument('-a', '--add', metavar=('archive'),
                    help='add Godot app to the managed versions without installing (can be a zip file)')

# Optional listing of available Godot version
exclusive_group.add_argument('-l', '--list', action='store_true',
                    help=f'list available Godot apps in {SAVE_DIR}')

# Parse arguments
args = parser.parse_args()




if args.list:
    display_versions()


if args.use:
    # print versions with an associated number
    choices = display_version_choice()
    # ask number to use
    chosen_number = int(input('Enter the choosen number: '))
    if 0 <= chosen_number <= len(choices):
        chosen_app = choices[chosen_number][2]
        chosen_version = choices[chosen_number][1]
        install(chosen_app)
        print(f'Using {chosen_version}')
    else:
        print('Incorrect number')
        print('aborting...')
    

if args.add:
    add_archive(args.add)


if args.install:
    godot_file = add_archive(args.install)

    print(f'Installing to {INSTALL_PATH}')
    install(godot_file)
